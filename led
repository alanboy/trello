
"""Basic NeoPixel LED animations for the QT Py."""
import time
import board
import neopixel
import adafruit_pypixelbuf

# Update this to match the pin to which you connected the NeoPixels
pixel_pin = board.A3
# Update this to match the number of NeoPixels connected
num_pixels = 30

pixels = neopixel.NeoPixel(pixel_pin, num_pixels, auto_write=False)
# Set to 0-1 to change the brightness of the NeoPixels
pixels.brightness = 0.1


def blink(color, wait):
    """Blink animation. Blinks all pixels."""
    pixels.fill(color)
    pixels.show()
    time.sleep(wait)
    pixels.fill((0, 0, 0))
    pixels.show()
    time.sleep(wait)


def chase(color, spacing=3, iteration_step=1):
    """Theatre chase animation. Chases across all pixels."""
    if spacing < 2:
        raise ValueError("Spacing must be greater than 1 to show chase pattern.")

    # Use modulo division to create the spacing between pixels.
    chase_pixel = iteration_step % spacing
    # Loop over pixels and turn on expected pixels to provided color.
    for pixel in range(0, len(pixels), spacing):
        # If the pixel is outside the total pixel range, break.
        if pixel + chase_pixel > len(pixels) - 1:
            break
        pixels[pixel + chase_pixel] = color
    pixels.show()

    # Loop over pixels and turn off expected pixels.
    for pixel in range(0, len(pixels), spacing):
        # If the pixel is outside the total pixel range, break.
        if pixel + chase_pixel > len(pixels) - 1:
            break
        pixels[pixel + chase_pixel] = (0, 0, 0)


def color_wipe(color, wait):
    """Color wipe animation. Wipes across all pixels."""
    for pixel in range(num_pixels):
        pixels[pixel] = color
        print("Turn green slowly")
        time.sleep(wait)
        pixels.show()
    time.sleep(0.5)


def rainbow_cycle(wait):
    """Rainbow cycle animation. Cycles across all pixels."""
    for color_index in range(255):
        for pixel in range(num_pixels):
            pixel_index = (pixel * 256 // num_pixels) + color_index
            pixels[pixel] = adafruit_pypixelbuf.colorwheel(pixel_index & 255)
        pixels.show()
        time.sleep(wait)

def pomodoro_rest():
    pixels.fill(BLUE)
    pixels.show()
    color_wipe(YELLOW, 20) # must be 20

def pomodoro_work():
    pixels.fill(RED)
    pixels.show()
    color_wipe(GREEN, .5) # must be 50

RED = (255, 0, 0)
YELLOW = (255, 150, 0)
GREEN = (0, 255, 0)
CYAN = (0, 255, 255)
BLUE = (0, 0, 255)
PURPLE = (180, 0, 255)
WHITE = (255, 255, 255)

from analogio import AnalogIn
analog_in = AnalogIn(board.A1)

#while True:
#    print(analog_in.value)
#    time.sleep(0.1)

#pomodoro_rest()
rainbow_cycle(.05)




while True:
    value = analog_in.value
    #print(value) 
    if (value > 1000):
        #print("yay" )
        pixels.brightness = 0.1
        pixels.fill(GREEN)
    else:
        #print("nay" )
        pixels.brightness = .9
        pixels.fill(WHITE)
            
    pixels.show()
    time.sleep(0.1)

