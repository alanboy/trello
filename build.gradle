plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.9'
}
apply plugin: "java"
apply plugin:'application'
sourceCompatibility = 1.8

def MAJOR_VERSION = 0
def MINOR_VERSION = 4
mainClassName = "TrelloCmd"


javafx {
    version = '11'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web' ]
}

repositories {
    mavenCentral()
    flatDir{
        dirs 'trello4j/target'
    }
}

dependencies {
    implementation  ('org.trello4j:trello4j:1.0-SNAPSHOT', 'com.google.code.gson:gson:2.6')
    implementation 'org.apache.logging.log4j:log4j-api:2.0.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.0.2'
    // https://mvnrepository.com/artifact/io.github.hkarthik7/azd
    implementation 'io.github.hkarthik7:azd:5.0.11'


    // this might only be needed in Linux:
    //compile files("C:\\Users\\alanb\\Downloads\\openjfx-11.0.2_windows-x64_bin-sdk\\javafx-sdk-11.0.2\\lib\\javafx.base.jar")
    //compile 'javafx:javafx.controls:11.0.0'
    //compile files("${System.properties['java.home']}\\lib\\jfxrt.jar")
}

//# ####################################################################
//#
//# ####################################################################
task writeVersionData {
    def localMachine = java.net.InetAddress.getLocalHost();
    def timeStamp = new java.text.SimpleDateFormat("MM-dd-yyyy HH:mm:ss").format(Calendar.getInstance().getTime())
    def lowVersion = new java.text.SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime())

    version = MAJOR_VERSION + '.' + MINOR_VERSION + '.' + lowVersion

    def AboutJava = new File("src\\main\\java\\About.java")
    AboutJava.text = "/* Auto generated code, your changes will be overwritten when built by gradle */\n" +
      "public class About { \n" +
      "    static final String BuiltByMachine = \"" + localMachine.getHostName() + "\"; \n" +
      "    static final String BuiltByUser = \"" + System.getProperty("user.name") + "\"; \n" +
      "    static final String DateTime = \"" + timeStamp + "\"; \n" +
      "    static final String Version = \"" + version + "\"; \n" +
      "}\n"

    def BuildFolder = new File("build\\libs")
    if (!BuildFolder.exists()) {
        BuildFolder.mkdirs()
    }

    // make directory build\libs if it does not exist.
    def VersionTxt = new File("build\\libs\\latestversion.json")
    VersionTxt.text = version.toString()
}


//# ####################################################################
//# Compile
//# ####################################################################
sourceSets {
    main.resources { exclude 'config.json' }
}

jar {
    dependsOn writeVersionData
    manifest { attributes 'Main-Class' : 'TrelloCmd',
        'Implementation-Version': version,
        'Implementation-title': 'Trello Client',
        //'Class-Path': configurations.implementation.collect { 'lib/' + it.getName() }.join(' ')
        'Class-Path':  'lib/something-something-something'
    }

    //from {
    //    configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
    //}
}


//# ####################################################################
//# Do  Last
//# ####################################################################
//task copyLibs(type: Copy) {
//    from configurations.compile
//    into 'build/libs/lib'
//}

task copyResources(type: Copy){
    from 'src/main/resources'
    into 'build/libs'
}

jar.doLast {
    //tasks.copyLibs.execute()
    //tasks.copyResources.execute()
}

//# ####################################################################
//# Publishing
//# ####################################################################
task publish(type: Copy) {
    from "build/libs/trello-" + version + ".jar"
    rename { String fileName ->
        fileName.replace(version, 'latest')
    }
    from "build/libs/latestversion.json"
    into 'dist'
    from "installer/trello-installer.msi"
    into 'dist'
}

//task publish.doFirst {
//    delete fileTree(dir: 'dist\\')
//}

