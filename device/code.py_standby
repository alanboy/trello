"""Basic NeoPixel LED animations for the QT Py."""
import time
import board
import neopixel
import adafruit_pypixelbuf
from digitalio import DigitalInOut, Direction, Pull

RED = (255, 0, 0)
YELLOW = (255, 150, 0)
GREEN = (0, 255, 0)
CYAN = (0, 255, 255)
BLUE = (0, 0, 255)
PURPLE = (180, 0, 255)

# makes pomodor times go very fast
debug_mode = False

##
## Setup the outputs (LEDs)
##
pixel_pin = board.A3
num_pixels = 30
pixels = neopixel.NeoPixel(pixel_pin, num_pixels, auto_write=False)
pixels.brightness = .7

##
## Setup the inputs (Switches)
##
leftSwitch = DigitalInOut(board.D2)
leftSwitch.direction = Direction.INPUT
leftSwitch.pull = Pull.UP

rightSwitch = DigitalInOut(board.D1)
rightSwitch.direction = Direction.INPUT
rightSwitch.pull = Pull.UP

##
## Light effects
##
def chase(color, spacing=3, iteration_step=1):
    """Theatre chase animation. Chases across all pixels."""
    if spacing < 2:
        raise ValueError("Spacing must be greater than 1 to show chase pattern.")

    # Use modulo division to create the spacing between pixels.
    chase_pixel = iteration_step % spacing
    # Loop over pixels and turn on expected pixels to provided color.
    for pixel in range(0, len(pixels), spacing):
        # If the pixel is outside the total pixel range, break.
        if pixel + chase_pixel > len(pixels) - 1:
            break
        pixels[pixel + chase_pixel] = color
    pixels.show()

    # Loop over pixels and turn off expected pixels.
    for pixel in range(0, len(pixels), spacing):
        # If the pixel is outside the total pixel range, break.
        if pixel + chase_pixel > len(pixels) - 1:
            break
        pixels[pixel + chase_pixel] = (0, 0, 0)


def color_wipe(color, wait):
    """Color wipe animation. Wipes across all pixels."""
    for pixel in range(num_pixels):
        pixels[pixel] = color
        is_canceled = sleep_with_cancel_check(wait)
        if is_canceled:
            return
        pixels.show()

def rainbow_cycle(wait):
    """Rainbow cycle animation. Cycles across all pixels."""
    for color_index in range(255):
        for pixel in range(num_pixels):
            pixel_index = (pixel * 256 // num_pixels) + color_index
            pixels[pixel] = adafruit_pypixelbuf.colorwheel(pixel_index & 255)
        pixels.show()
        is_canceled = sleep_with_cancel_check(wait)
        if is_canceled:
            return

##
## Seep functions
##
def sleep_with_cancel_check(wait):
    current_time = 0
    while (current_time < wait):
        time.sleep(.25)
        if is_any_button_pressed():
            return True
        current_time += .25
    return False

def pomodoro_rest():
    pixels.brightness = .5
    pixels.fill(BLUE)
    pixels.show()
    color_wipe(YELLOW, .20 if debug_mode else 20) # must be 20

def pomodoro_work():
    pixels.brightness = .7
    pixels.fill(RED)
    pixels.show()
    color_wipe(GREEN, .50 if debug_mode else 50) # must be 50

def pomodoro_standby():
    pixels.brightness = .2
    rainbow_cycle(1)

def is_start_button_pressed():
    return not leftSwitch.value

def is_end_button_pressed():
    return not rightSwitch.value

def is_any_button_pressed():
    return is_start_button_pressed() or is_end_button_pressed()

while True:
    if is_any_button_pressed():
        if is_start_button_pressed():
            pomodoro_work()
            continue
        if is_end_button_pressed():
            pomodoro_rest()
            continue

    ## CHANGE THIS DEPENDING ON THE STARTING STATE:
    # pomodoro_work()
    # pomodoro_rest()
    pomodoro_standby()

    # always end on standby regarless of how you started
    while True:
        pomodoro_standby()
        if is_any_button_pressed():
            break

